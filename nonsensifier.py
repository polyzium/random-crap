'''
Nonsensifier, reads language file and makes GoogleTranslate go fucking nuts
WARNING: this program was made with the "just work" intention, so the code may look like shit

Copyright 2020 Polyzium Productions

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'''
import ast
import re
import argparse
import sys
import random
import textwrap
import googletrans #pip install googletrans
from time import sleep

parser = argparse.ArgumentParser(description="Reads language file and puts them through Google Translate.")
parser.add_argument("file", metavar="FILE")
parser.add_argument("-r", "--randomize", metavar="AMOUNT", type=int, help="Randomly select AMOUNT languages")
parser.add_argument("-l", "--lore", action="store_true", help="Treat the file as lore, ignores LORETAB and LOREREL entries")
args = parser.parse_args()

chain = []
chainout = "english -> "
if args.randomize and args.randomize <= 0:
	print("Chain size must be greater than 0!")
	sys.exit()
elif args.randomize:
	for i in range(args.randomize): #for (int i=0;i<args.randomize;i++)
		chain.append(random.choice(list(googletrans.LANGUAGES)))
else:
	chain = ['tl', 'af', 'fy', 'et', 'yo', 'pa', 'uz', 'zh-cn', 'mr', 'ug', 'mr', 'or', 'uz', 'ky', 'ky']

for lang in chain:
	chainout += googletrans.LANGUAGES[lang] + " -> "
chainout += "english"
print("Selected chain: "+chainout)

entries = {}
with open(args.file) as langfile:
	for rawentry in re.findall(r".*=\s*\"[^\;]*", langfile.read()):
		if re.findall(" = ", rawentry):
			#Found inline entry
			(entry,txt) = rawentry.split(" = ")
			txt = re.sub(r"^\"|\"$", "", txt)
			txt = re.sub(r"\\c.", "", txt)
			txt = txt.replace("\\n", "\n")
		elif re.findall(" =\n", rawentry):
			#Found multiline entry
			(entry,txt) = rawentry.split(" =\n")
			#Remove junk
			txt = re.sub(r"^\"|\"(?=\n)\n|\"$", "", txt, flags=re.M)
			txt = re.sub(r"\\c.", "", txt)
			txt = txt.replace("\\n", "\n")
			txt = txt.replace('\\"', '\"')
		else:
			#Not an entry
			continue
		if args.lore:
			if re.search(r"LORETAB|LOREREL", entry):
				continue
		if re.search(r"\n\n", txt):
			txt = txt.split("\n\n") #Some entries may be too big for GT, split into paragraphs
			print(entry+" is too big, splitting into "+str(len(txt))+" segments")
		entries[entry] = txt
		#print("Parsed entry "+entry+": ", entries[entry])
		#sleep(0.25)


print("Parsed "+str(len(entries))+" entries")

#https://github.com/ssut/py-googletrans/issues/234
def bruteforce_translate(text, dest, src):
	trans = googletrans.Translator(service_urls=['translate.google.com', 'translate.google.co.uk'], raise_exception=True)
	while True:
		try:
			#sleep(1)
			if isinstance(text, list):
				#print("Fed text:", text)
				out = []
				for t in trans.translate(text, dest=dest, src=src):
					out.append(t.text)
			else:
				out = trans.translate(text, dest=dest, src=src).text
		except Exception as e:
			trans = googletrans.Translator(service_urls=['translate.google.com', 'translate.google.co.uk'], raise_exception=True)
			#print(e)
		else:
			return out


def chain_translate(text):
	print("english -> ", end="", flush=True)
	prevlang = "en"
	prevtext = text
	for lang in chain:
		#print(googletrans.LANGUAGES[prevlang]+"->"+googletrans.LANGUAGES[lang])
		prevtext = bruteforce_translate(prevtext, lang, prevlang)
		prevlang = lang
		print(googletrans.LANGUAGES[lang]+" -> ", end="", flush=True)
		#print(prevtext)
	print("english")
	return bruteforce_translate(prevtext, "en", "auto")

with open(args.file+".gt", mode="x") as outfile:
	outfile.write("// Generated by nonsensifier.py from "+args.file+"\n// Language chain used: "+chainout+"\n[default]\n")
	for entry, txt in entries.items():
		print(entry+": ", end="")
		tout = chain_translate(txt)
		if isinstance(tout, list):
			tout = "\\n\\n".join(tout)
		tout = tout.replace("\n", "\\n").replace('\"', '\\"')
		print(tout)
		#chain_translate(txt)
		outfile.write(entry+" = \""+tout+"\";\n")
		outfile.flush()
